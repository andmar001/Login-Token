USE [TOKEN_API]
GO
/****** Object:  StoredProcedure [dbo].[spUsuariosSetPassword]    Script Date: 07/05/2023 01:23:44 a. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Antonio Andrade
-- Create date: 04/05/2023 11:19:00 a.m.
-- Description:	Comprobar que el password antiguo es correcto y actualizarlo
-- =============================================
ALTER PROCEDURE [dbo].[spUsuariosSetPassword] 
-- Add the parameters for the stored procedure here
(
	@Email varchar(250),
    @OldPassword varchar(30),
    @NewPassword varchar(30)
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Acciones
    BEGIN TRY
        -- El password está guardado como SHA256(password), verificamos que es igualk que @OldPassword 
        DECLARE @OldHashSegunUsuario varbinary(32);
        SELECT @OldHashSegunUsuario = HASHBYTES('SHA2_256', @OldPassword);
        
        DECLARE @Coincide int = 0;
        SELECT @Coincide = COUNT(*) FROM [dbo].[Usuarios] WHERE Password = @OldHashSegunUsuario;    -- Comparación de hashes el de la base de datos y el que nos pasan

        IF @Coincide = 0
        BEGIN
            SELECT 0;
            RETURN;
        END

        -- Si ha coincidido, actualizamos la contraseña del usuario
        DECLARE @NewHash varbinary(32);
        SELECT @NewHash = HASHBYTES('SHA2_256', @NewPassword);
        UPDATE [dbo].[Usuarios] SET Password = @NewHash WHERE Email = @Email;
        SELECT 1;
        RETURN;
    END TRY
    BEGIN CATCH
        -- EXECUTE [dbo].[spErrorInsert]
    END CATCH
END
